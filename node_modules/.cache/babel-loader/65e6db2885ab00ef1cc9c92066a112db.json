{"ast":null,"code":"var _jsxFileName = \"/home/dolan/Downloads/DaveDotCom_/src/screens/data/Projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport ProjectData from './ProjectData';\nimport classes from '../css/Projects.module.css';\nimport github from './github.png';\nimport Button from 'react-bootstrap/Button';\nimport { alignPropType } from \"react-bootstrap/esm/types\"; //Make the Github logo bounce\n\nimport { bounce, fadeIn } from 'react-animations';\nimport styled, { keyframes } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BounceGithub = styled.div`animation: 2s ${keyframes`${bounce}`} infinite`;\n_c = BounceGithub;\nconst FadeIn = styled.div`\n    animation: ${keyframes`${fadeIn}`} 3.5s;    \n`;\n_c2 = FadeIn;\n\nconst Projects = () => {\n  _s();\n\n  var milk = new ProjectData('Milk', 'https://github.com/DavidHostler/Milk', 'Milk (it is a weird name I know, but some people like a nice glass of Milk now and then). This is a super resolution generative adversarial network that receives an image of a given size, and uses deep learning to \"hallucinate\" a more high resolution version of that image. This project is built on ExpressJS  with HTML and CSS, and uses a pretrained GAN model based off of the Pytorch website. That being said, while I did not train this model, I figured it would be a cool starting point to use for demonstration purposes.');\n  var gauss = new ProjectData('Gaussian', 'https://github.com/DavidHostler/Pytorch-Gaussian-NN', 'This is a little research project I worked on briefly in late 2020 and early 2021. I had volunteered to help some grad students in the University of Toronto Scarborough materials science research project with implementing a single hidden-layer neural network in order to model high-precision Gaussian functions given a single input value. The idea is that if a given element or compound has a known excitation energy known to a certain accuracy, then we could improve this accuracy by using a neural network to approximate the Gaussian distribution function centred around this excitation energy eigenvalue. The results were that the required neural architecture was insufficient for such a desired result, since training the neural network on successive eigenvalue training data had the effect of causing the model to \"unlearn\" anything it knew of previous eigenvalue distributions. Therefore, I posit that the only way to implement this method successfully would be to ascribe to the model an attention window- e.g. RNNs, LSTMs or preferably Transformers. These models were deemed too complicated for the desired architecture and so they decided to implement the energy distribution functions directly by hard-coding it using principles from basic statistics. Again, this project might be difficult to parse for a layperson with respect to physics, stats or machine learning, but nonetheless it does a reasonable job of showcasing some of my programming and math skills going back a couple years, so it is includeded in my project directory...');\n  var draco = new ProjectData('Draco', 'https://github.com/DavidHostler/Draco', 'This one is a favorite for a couple of reasons. I was attempting to implement a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients or DDPG for short. I wanted to maximize the speed of my agent as well. Python is known to run about ~ 20 times more slowly than C/C++, so I figured that I would implement my solution in C++ using my current understanding of the Python code at the time. In doing so, I ran into a few build issues with the Tensorflow C API and figured that since DDPG only uses deep hidden layers (i.e. linear transformations of the form Ax + b = y, where A is a matrix a.k.a. \"weights\"\", x is the input tensor, b is the bias) This project allowed me to play around with a super fast RL simulation and learn more about the direct behaviour of deep learning models from a mathematical point of view, as I had to hard-code the linear transformations and take the derivatives of activation functions numerically. If using this model, depending on the user architecture you might want to consider implementing a Big Float datatype to prevent Nan values as weights, biases or gradients.');\n  var nattyornot = new ProjectData('Natty Or Not', 'https://github.com/DavidHostler/NattyOrNot/tree/master', 'Here, I have implemented a very heavy full stack web application for the purpose of determining whether somebody is a natural or enhanced lifter. I wrote and trained a binary classifier network in Tensorflow on images of professional bodybuilders and on those of average-to-decent physiques. Additionally, I set up a set of REST API endpointsusing Django with Python3 to enable users to interact with the neural network from behind the webpage. A simple webpage in ReactJS is also written, with instructions to allow a user to upload a picture of any physique and obtain a prediction as to whether the image is of a natural or enhanced lifter. It is purely for entertainment and is not meant to be used in lieu of a real drug test.');\n  const projects = [gauss, milk, draco, nattyornot];\n  const [project, setProjects] = useState(\"\"); // if(project == \"\"){\n  //     return(\n  //        <div>\n  //             <h2>Please Click On One Of The Project Buttons In The Upper Left Corner of Your Screen!</h2>\n  //        </div>\n  //     )\n  // }\n\n  function isButtonClicked() {\n    if (project == \"\") {\n      return \"Please click one of the project buttons!\";\n    } else {\n      console.log(\"Keep calm and carry on, tovarisch!\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: projects.map(project => /*#__PURE__*/_jsxDEV(FadeIn, {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            color: \"#000000\",\n            backgroundColor: \"#d4af37\",\n            borderRadius: '15px',\n            position: 'relative',\n            left: '36%',\n            top: '225px',\n            // border: 'none',\n            margin: \"1%\",\n            boxShadow: \"5px 5px 3px rgba(46, 46, 46, 0.62)\"\n          },\n          className: \"custom_subtitle\",\n          type: \"button\",\n          onClick: () => setProjects(project),\n          children: project.title\n        }, project, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center_all\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes['center'],\n        children: project.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes['center'],\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: project.link,\n          className: classes['hyperlink'],\n          children: /*#__PURE__*/_jsxDEV(BounceGithub, {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: github // 'https://static01.nyt.com/images/2016/09/28/us/28xp-pepefrog/28xp-pepefrog-superJumbo.jpg'\n              ,\n              style: {\n                borderRadius: '50%',\n                height: '50px',\n                width: '50px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          display: 'block',\n          marginTop: '1em',\n          marginBottom: '1em',\n          marginLeft: '2rem',\n          marginRight: '2rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(FadeIn, {\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: project.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Projects, \"9bPMSjqfdGJNPVFqO5NSAZOJAeE=\");\n\n_c3 = Projects;\nexport default Projects;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"BounceGithub\");\n$RefreshReg$(_c2, \"FadeIn\");\n$RefreshReg$(_c3, \"Projects\");","map":{"version":3,"sources":["/home/dolan/Downloads/DaveDotCom_/src/screens/data/Projects.js"],"names":["React","useState","ProjectData","classes","github","Button","alignPropType","bounce","fadeIn","styled","keyframes","BounceGithub","div","FadeIn","Projects","milk","gauss","draco","nattyornot","projects","project","setProjects","isButtonClicked","console","log","map","color","backgroundColor","borderRadius","position","left","top","margin","boxShadow","title","link","height","width","display","marginTop","marginBottom","marginLeft","marginRight","body"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport ProjectData from './ProjectData';\nimport classes from '../css/Projects.module.css';\nimport github from './github.png';\nimport Button from 'react-bootstrap/Button';\nimport { alignPropType } from \"react-bootstrap/esm/types\";\n\n//Make the Github logo bounce\nimport { bounce, fadeIn } from 'react-animations';\nimport styled, { keyframes } from 'styled-components';\nconst BounceGithub = styled.div`animation: 2s ${keyframes `${bounce}`} infinite`;\n\nconst FadeIn = styled.div`\n    animation: ${keyframes `${fadeIn}`} 3.5s;    \n`\n\n\n\nconst Projects = () => {\n    var milk = new ProjectData(\n        'Milk',\n        'https://github.com/DavidHostler/Milk',\n        'Milk (it is a weird name I know, but some people like a nice glass of Milk now and then). This is a super resolution generative adversarial network that receives an image of a given size, and uses deep learning to \"hallucinate\" a more high resolution version of that image. This project is built on ExpressJS  with HTML and CSS, and uses a pretrained GAN model based off of the Pytorch website. That being said, while I did not train this model, I figured it would be a cool starting point to use for demonstration purposes.'\n    );\n    \n    var gauss = new ProjectData(\n        'Gaussian',\n        'https://github.com/DavidHostler/Pytorch-Gaussian-NN',\n        'This is a little research project I worked on briefly in late 2020 and early 2021. I had volunteered to help some grad students in the University of Toronto Scarborough materials science research project with implementing a single hidden-layer neural network in order to model high-precision Gaussian functions given a single input value. The idea is that if a given element or compound has a known excitation energy known to a certain accuracy, then we could improve this accuracy by using a neural network to approximate the Gaussian distribution function centred around this excitation energy eigenvalue. The results were that the required neural architecture was insufficient for such a desired result, since training the neural network on successive eigenvalue training data had the effect of causing the model to \"unlearn\" anything it knew of previous eigenvalue distributions. Therefore, I posit that the only way to implement this method successfully would be to ascribe to the model an attention window- e.g. RNNs, LSTMs or preferably Transformers. These models were deemed too complicated for the desired architecture and so they decided to implement the energy distribution functions directly by hard-coding it using principles from basic statistics. Again, this project might be difficult to parse for a layperson with respect to physics, stats or machine learning, but nonetheless it does a reasonable job of showcasing some of my programming and math skills going back a couple years, so it is includeded in my project directory...'\n    );\n    \n    var draco = new ProjectData(\n        'Draco',\n        'https://github.com/DavidHostler/Draco',\n        'This one is a favorite for a couple of reasons. I was attempting to implement a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients or DDPG for short. I wanted to maximize the speed of my agent as well. Python is known to run about ~ 20 times more slowly than C/C++, so I figured that I would implement my solution in C++ using my current understanding of the Python code at the time. In doing so, I ran into a few build issues with the Tensorflow C API and figured that since DDPG only uses deep hidden layers (i.e. linear transformations of the form Ax + b = y, where A is a matrix a.k.a. \"weights\"\", x is the input tensor, b is the bias) This project allowed me to play around with a super fast RL simulation and learn more about the direct behaviour of deep learning models from a mathematical point of view, as I had to hard-code the linear transformations and take the derivatives of activation functions numerically. If using this model, depending on the user architecture you might want to consider implementing a Big Float datatype to prevent Nan values as weights, biases or gradients.'\n    );\n\n    \n    var nattyornot = new ProjectData(\n        'Natty Or Not',\n        'https://github.com/DavidHostler/NattyOrNot/tree/master',\n        'Here, I have implemented a very heavy full stack web application for the purpose of determining whether somebody is a natural or enhanced lifter. I wrote and trained a binary classifier network in Tensorflow on images of professional bodybuilders and on those of average-to-decent physiques. Additionally, I set up a set of REST API endpointsusing Django with Python3 to enable users to interact with the neural network from behind the webpage. A simple webpage in ReactJS is also written, with instructions to allow a user to upload a picture of any physique and obtain a prediction as to whether the image is of a natural or enhanced lifter. It is purely for entertainment and is not meant to be used in lieu of a real drug test.'\n    )\n\n    const projects = [gauss, milk, draco, nattyornot];\n    const [project, setProjects] = useState(\"\");\n\n    // if(project == \"\"){\n    //     return(\n    //        <div>\n    //             <h2>Please Click On One Of The Project Buttons In The Upper Left Corner of Your Screen!</h2>\n    //        </div>\n    //     )\n    // }\n    \n    function isButtonClicked(){\n        if(project == \"\"){\n            return \"Please click one of the project buttons!\";\n        }\n        else{\n            console.log(\"Keep calm and carry on, tovarisch!\")\n        }\n    }\n\n    return (\n\n        <div>\n\n        <div>\n            {/* This is where the project buttons are mapped */}\n        {projects.map(project=>(\n            <FadeIn>\n        <button \n\n        style={{color:\"#000000\",\n                backgroundColor:\"#d4af37\",\n                borderRadius: '15px',\n                position: 'relative',\n                left: '36%',\n                top:'225px',\n                // border: 'none',\n         margin: \"1%\", boxShadow: \"5px 5px 3px rgba(46, 46, 46, 0.62)\"}} \n        \n        className=\"custom_subtitle\"\n        type=\"button\"\n        key={project}\n        \n        onClick={()=>setProjects(project)}>\n            {project.title}\n        </button>\n        </FadeIn>\n        \n        ))}\n\n\n        </div>    \n                <div className = \"center_all\">\n                    <h1 className={classes['center']}>{project.title}</h1>\n\n                    {/* <h2 className={classes['center']}>\n                        <a href = {project.link}\n                        className={classes['hyperlink']}\n                        >\n                    \n                        {project.link}\n                        </a>\n                    </h2> */}\n                    <div className={classes['center']}>\n                    <a href = {project.link}\n                        className={classes['hyperlink']}\n                        >\n                    \n                    <BounceGithub>\n                    <img src={github}\n                    \n                    // 'https://static01.nyt.com/images/2016/09/28/us/28xp-pepefrog/28xp-pepefrog-superJumbo.jpg'\n                    style={{borderRadius: '50%',\n                            height:'50px',\n                            width: '50px'}}/>\n                    </BounceGithub>\n                       \n                        </a>\n                    </div>\n                    \n\n                        <p \n                        style={{\n                            display: 'block',\n                            marginTop: '1em',\n                            marginBottom: '1em',\n                            marginLeft: '2rem',\n                            marginRight: '2rem'\n                        }}\n                        >\n            <FadeIn>\n\n                        <h5>\n                        {project.body}\n                        </h5>\n                        </FadeIn>\n\n                        </p>\n                </div>\n\n\n        </div>\n    )\n\n}\n\n\n\nexport default Projects;"]},"metadata":{},"sourceType":"module"}