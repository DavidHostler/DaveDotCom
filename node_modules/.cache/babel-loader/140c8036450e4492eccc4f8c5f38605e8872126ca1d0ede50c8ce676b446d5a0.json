{"ast":null,"code":"var _jsxFileName = \"/home/dolan/Downloads/DaveDotCom_/src/screens/data/Projects.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport ProjectData from './ProjectData';\nimport classes from '../css/Projects.module.css';\nimport github from './github.png';\nimport Button from 'react-bootstrap/Button';\nimport { alignPropType } from \"react-bootstrap/esm/types\";\n\n//Make the Github logo bounce\nimport { bounce, fadeIn } from 'react-animations';\nimport styled, { keyframes } from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BounceGithub = styled.div`animation: 2s ${keyframes`${bounce}`} infinite`;\n_c = BounceGithub;\nconst FadeIn = styled.div`\n    animation: ${keyframes`${fadeIn}`} 3.5s;    \n`;\n_c2 = FadeIn;\nconst Projects = () => {\n  _s();\n  var milk = new ProjectData('Milk', 'https://github.com/DavidHostler/Milk', 'Milk (it is a weird name I know, but some people like a nice glass of Milk now and then). This is a super resolution generative adversarial network that receives an image of a given size, and uses deep learning to \"hallucinate\" a more high resolution version of that image. This project is built on ExpressJS  with HTML and CSS, and uses a pretrained GAN model based off of the Pytorch website. That being said, while I did not train this model, I figured it would be a cool starting point to use for demonstration purposes.');\n  var gauss = new ProjectData('Gaussian', 'https://github.com/DavidHostler/Pytorch-Gaussian-NN', 'This is a little research project I worked on briefly in late 2020 and early 2021. I had volunteered to help some grad students in the University of Toronto Scarborough materials science research project with implementing a single hidden-layer neural network in order to model high-precision Gaussian functions given a single input value. The idea is that if a given element or compound has a known excitation energy known to a certain accuracy, then we could improve this accuracy by using a neural network to approximate the Gaussian distribution function centred around this excitation energy eigenvalue. The results were that the required neural architecture was insufficient for such a desired result, since training the neural network on successive eigenvalue training data had the effect of causing the model to \"unlearn\" anything it knew of previous eigenvalue distributions. Therefore, I posit that the only way to implement this method successfully would be to ascribe to the model an attention window- e.g. RNNs, LSTMs or preferably Transformers. These models were deemed too complicated for the desired architecture and so they decided to implement the energy distribution functions directly by hard-coding it using principles from basic statistics. Again, this project might be difficult to parse for a layperson with respect to physics, stats or machine learning, but nonetheless it does a reasonable job of showcasing some of my programming and math skills going back a couple years, so it is includeded in my project directory...');\n  var draco = new ProjectData('Draco', 'https://github.com/DavidHostler/Draco', 'This one is a favorite for a couple of reasons. I was attempting to implement a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients or DDPG for short. I wanted to maximize the speed of my agent as well. Python is known to run about ~ 20 times more slowly than C/C++, so I figured that I would implement my solution in C++ using my current understanding of the Python code at the time. In doing so, I ran into a few build issues with the Tensorflow C API and figured that since DDPG only uses deep hidden layers (i.e. linear transformations of the form Ax + b = y, where A is a matrix a.k.a. \"weights\"\", x is the input tensor, b is the bias) This project allowed me to play around with a super fast RL simulation and learn more about the direct behaviour of deep learning models from a mathematical point of view, as I had to hard-code the linear transformations and take the derivatives of activation functions numerically. If using this model, depending on the user architecture you might want to consider implementing a Big Float datatype to prevent Nan values as weights, biases or gradients.');\n  var nattyornot = new ProjectData('Natty Or Not', 'https://github.com/DavidHostler/NattyOrNot/tree/master', 'Here, I have implemented a very heavy full stack web application for the purpose of determining whether somebody is a natural or enhanced lifter. I wrote and trained a binary classifier network in Tensorflow on images of professional bodybuilders and on those of average-to-decent physiques. Additionally, I set up a set of REST API endpointsusing Django with Python3 to enable users to interact with the neural network from behind the webpage. A simple webpage in ReactJS is also written, with instructions to allow a user to upload a picture of any physique and obtain a prediction as to whether the image is of a natural or enhanced lifter. It is purely for entertainment and is not meant to be used in lieu of a real drug test.');\n  const projects = [gauss, milk, draco, nattyornot];\n  const [project, setProjects] = useState(\"\");\n\n  // if(project == \"\"){\n  //     return(\n  //        <div>\n  //             <h2>Please Click On One Of The Project Buttons In The Upper Left Corner of Your Screen!</h2>\n  //        </div>\n  //     )\n  // }\n\n  function isButtonClicked() {\n    if (project == \"\") {\n      return \"Please click one of the project buttons!\";\n    } else {\n      console.log(\"Keep calm and carry on, tovarisch!\");\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FadeIn, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: projects.map(project => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            color: \"#000000\",\n            backgroundColor: \"#d4af37\",\n            borderRadius: '15px',\n            position: 'relative',\n            left: '50px',\n            // top:'225px',\n            // border: 'none',\n            margin: \"1%\",\n            boxShadow: \"5px 5px 3px rgba(46, 46, 46, 0.62)\"\n          },\n          className: \"custom_subtitle\",\n          type: \"button\",\n          onClick: () => setProjects(project),\n          children: project.title\n        }, project, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 9\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"center_all\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes['center'],\n        children: project.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes['center'],\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: project.link,\n          className: classes['hyperlink'],\n          children: /*#__PURE__*/_jsxDEV(FadeIn, {\n            children: /*#__PURE__*/_jsxDEV(BounceGithub, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: github\n\n                // 'https://static01.nyt.com/images/2016/09/28/us/28xp-pepefrog/28xp-pepefrog-superJumbo.jpg'\n                ,\n                style: {\n                  borderRadius: '50%',\n                  height: '50px',\n                  width: '50px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          display: 'block',\n          marginTop: '1em',\n          marginBottom: '1em',\n          marginLeft: '2rem',\n          marginRight: '2rem'\n        },\n        children: /*#__PURE__*/_jsxDEV(FadeIn, {\n          children: /*#__PURE__*/_jsxDEV(\"h5\", {\n            children: project.body\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(Projects, \"9bPMSjqfdGJNPVFqO5NSAZOJAeE=\");\n_c3 = Projects;\nexport default Projects;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"BounceGithub\");\n$RefreshReg$(_c2, \"FadeIn\");\n$RefreshReg$(_c3, \"Projects\");","map":{"version":3,"names":["React","useState","ProjectData","classes","github","Button","alignPropType","bounce","fadeIn","styled","keyframes","BounceGithub","div","FadeIn","Projects","milk","gauss","draco","nattyornot","projects","project","setProjects","isButtonClicked","console","log","map","color","backgroundColor","borderRadius","position","left","margin","boxShadow","title","link","height","width","display","marginTop","marginBottom","marginLeft","marginRight","body"],"sources":["/home/dolan/Downloads/DaveDotCom_/src/screens/data/Projects.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport ProjectData from './ProjectData';\nimport classes from '../css/Projects.module.css';\nimport github from './github.png';\nimport Button from 'react-bootstrap/Button';\nimport { alignPropType } from \"react-bootstrap/esm/types\";\n\n//Make the Github logo bounce\nimport { bounce, fadeIn } from 'react-animations';\nimport styled, { keyframes } from 'styled-components';\nconst BounceGithub = styled.div`animation: 2s ${keyframes `${bounce}`} infinite`;\n\nconst FadeIn = styled.div`\n    animation: ${keyframes `${fadeIn}`} 3.5s;    \n`\n\n\n\nconst Projects = () => {\n    var milk = new ProjectData(\n        'Milk',\n        'https://github.com/DavidHostler/Milk',\n        'Milk (it is a weird name I know, but some people like a nice glass of Milk now and then). This is a super resolution generative adversarial network that receives an image of a given size, and uses deep learning to \"hallucinate\" a more high resolution version of that image. This project is built on ExpressJS  with HTML and CSS, and uses a pretrained GAN model based off of the Pytorch website. That being said, while I did not train this model, I figured it would be a cool starting point to use for demonstration purposes.'\n    );\n    \n    var gauss = new ProjectData(\n        'Gaussian',\n        'https://github.com/DavidHostler/Pytorch-Gaussian-NN',\n        'This is a little research project I worked on briefly in late 2020 and early 2021. I had volunteered to help some grad students in the University of Toronto Scarborough materials science research project with implementing a single hidden-layer neural network in order to model high-precision Gaussian functions given a single input value. The idea is that if a given element or compound has a known excitation energy known to a certain accuracy, then we could improve this accuracy by using a neural network to approximate the Gaussian distribution function centred around this excitation energy eigenvalue. The results were that the required neural architecture was insufficient for such a desired result, since training the neural network on successive eigenvalue training data had the effect of causing the model to \"unlearn\" anything it knew of previous eigenvalue distributions. Therefore, I posit that the only way to implement this method successfully would be to ascribe to the model an attention window- e.g. RNNs, LSTMs or preferably Transformers. These models were deemed too complicated for the desired architecture and so they decided to implement the energy distribution functions directly by hard-coding it using principles from basic statistics. Again, this project might be difficult to parse for a layperson with respect to physics, stats or machine learning, but nonetheless it does a reasonable job of showcasing some of my programming and math skills going back a couple years, so it is includeded in my project directory...'\n    );\n    \n    var draco = new ProjectData(\n        'Draco',\n        'https://github.com/DavidHostler/Draco',\n        'This one is a favorite for a couple of reasons. I was attempting to implement a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients or DDPG for short. I wanted to maximize the speed of my agent as well. Python is known to run about ~ 20 times more slowly than C/C++, so I figured that I would implement my solution in C++ using my current understanding of the Python code at the time. In doing so, I ran into a few build issues with the Tensorflow C API and figured that since DDPG only uses deep hidden layers (i.e. linear transformations of the form Ax + b = y, where A is a matrix a.k.a. \"weights\"\", x is the input tensor, b is the bias) This project allowed me to play around with a super fast RL simulation and learn more about the direct behaviour of deep learning models from a mathematical point of view, as I had to hard-code the linear transformations and take the derivatives of activation functions numerically. If using this model, depending on the user architecture you might want to consider implementing a Big Float datatype to prevent Nan values as weights, biases or gradients.'\n    );\n\n    \n    var nattyornot = new ProjectData(\n        'Natty Or Not',\n        'https://github.com/DavidHostler/NattyOrNot/tree/master',\n        'Here, I have implemented a very heavy full stack web application for the purpose of determining whether somebody is a natural or enhanced lifter. I wrote and trained a binary classifier network in Tensorflow on images of professional bodybuilders and on those of average-to-decent physiques. Additionally, I set up a set of REST API endpointsusing Django with Python3 to enable users to interact with the neural network from behind the webpage. A simple webpage in ReactJS is also written, with instructions to allow a user to upload a picture of any physique and obtain a prediction as to whether the image is of a natural or enhanced lifter. It is purely for entertainment and is not meant to be used in lieu of a real drug test.'\n    )\n\n    const projects = [gauss, milk, draco, nattyornot];\n    const [project, setProjects] = useState(\"\");\n\n    // if(project == \"\"){\n    //     return(\n    //        <div>\n    //             <h2>Please Click On One Of The Project Buttons In The Upper Left Corner of Your Screen!</h2>\n    //        </div>\n    //     )\n    // }\n    \n    function isButtonClicked(){\n        if(project == \"\"){\n            return \"Please click one of the project buttons!\";\n        }\n        else{\n            console.log(\"Keep calm and carry on, tovarisch!\")\n        }\n    }\n\n    return (\n\n        <div>\n\n        <FadeIn>\n\n        <div>\n            {/* This is where the project buttons are mapped */}\n        {projects.map(project=>(\n        <button \n\n        style={{color:\"#000000\",\n                backgroundColor:\"#d4af37\",\n                borderRadius: '15px',\n                position: 'relative',\n                left: '50px',\n                // top:'225px',\n                // border: 'none',\n         margin: \"1%\", boxShadow: \"5px 5px 3px rgba(46, 46, 46, 0.62)\"}} \n        \n        className=\"custom_subtitle\"\n        type=\"button\"\n        key={project}\n        \n        onClick={()=>setProjects(project)}>\n            {project.title}\n        </button>\n        \n        ))}\n\n\n        </div>    \n        </FadeIn>\n\n                <div className = \"center_all\">\n                    <h1 className={classes['center']}>{project.title}</h1>\n\n                    {/* <h2 className={classes['center']}>\n                        <a href = {project.link}\n                        className={classes['hyperlink']}\n                        >\n                    \n                        {project.link}\n                        </a>\n                    </h2> */}\n                    <div className={classes['center']}>\n                    <a href = {project.link}\n                        className={classes['hyperlink']}\n                        >\n                    <FadeIn>\n                    <BounceGithub>\n                    <img src={github}\n                    \n                    // 'https://static01.nyt.com/images/2016/09/28/us/28xp-pepefrog/28xp-pepefrog-superJumbo.jpg'\n                    style={{borderRadius: '50%',\n                            height:'50px',\n                            width: '50px'}}/>\n                    </BounceGithub>\n                    </FadeIn>\n                       \n                        </a>\n                    </div>\n                    \n\n                        <p \n                        style={{\n                            display: 'block',\n                            marginTop: '1em',\n                            marginBottom: '1em',\n                            marginLeft: '2rem',\n                            marginRight: '2rem'\n                        }}\n                        >\n            <FadeIn>\n\n                        <h5>\n                        {project.body}\n                        </h5>\n                        </FadeIn>\n\n                        </p>\n                </div>\n\n\n        </div>\n    )\n\n}\n\n\n\nexport default Projects;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}