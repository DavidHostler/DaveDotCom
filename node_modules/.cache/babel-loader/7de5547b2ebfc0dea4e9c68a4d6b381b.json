{"ast":null,"code":"var _jsxFileName = \"/home/dolan/Downloads/DaveDotCom_/src/animations/DaveTransition.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Dave from '../screens/data/Dave.jpg';\nimport { CSSTransition, Transition } from 'react-transition-group';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DaveTransition = () => {\n  _s();\n\n  // const [transitionState, setTransitionState] = useState(true);\n  // const [showDave, setShowDave] = useState(true);\n  // const [imageClasses, setImageClasses] = useState(\"d-none\");\n  // function showImage(node) {\n  //     setImageClasses(\"d-block\");\n  //     node.style.opacity = 0;\n  //   }\n  const [showCat, setShowCat] = useState(false);\n  const [imageClasses, setImageClasses] = useState(\"d-none\");\n  /** End Variables for Using CSS Transitions  */\n\n  /** Start Variables for Using Transition Groups  */\n  // const [languages, setLanguages] = useState(randomItems(defaultLanguages, 4));\n\n  const [counter, setCounter] = useState(11);\n  /** End Variables for Using Transition Groups  */\n\n  /** Start Variables for Using Switch Transitions  */\n\n  const [isDanger, setIsDanger] = useState(true);\n  const [isDanger2, setIsDanger2] = useState(true);\n  /** End Variables for Using Switch Transitions  */\n\n  /** Start Helper Functions for Using CSS Transitions */\n\n  function toggleCat() {\n    setShowCat(!showCat);\n  }\n\n  function hideImage() {\n    setImageClasses(\"d-none\");\n  }\n\n  function showImage(node) {\n    setImageClasses(\"d-block\");\n    node.style.opacity = 0;\n  }\n\n  function removeOpacity(node) {\n    node.style.opacity = 1;\n  }\n  /** End Helper Functions for Using CSS Transitions */\n\n  /** Start Helper Functions for Using Transition Groups */\n\n\n  function addLanguage() {\n    const newLanguages = languages.splice(0);\n    const newItem = Object.assign({}, randomItems(defaultLanguages, 1)[0]);\n    newItem.id = counter;\n    newLanguages.push(newItem);\n    setLanguages(newLanguages);\n    setCounter(counter + 1);\n  }\n\n  function removeLanguage(id) {\n    const newLanguages = languages.splice(0);\n    const ind = newLanguages.findIndex(language => language.id === id);\n\n    if (ind !== -1) {\n      newLanguages.splice(ind, 1);\n      setLanguages(newLanguages);\n    }\n  }\n\n  const transitions = {\n    entering: {\n      display: 'block'\n    },\n    entered: {\n      opacity: 1,\n      display: 'block'\n    },\n    exiting: {\n      opacity: 0,\n      display: 'block'\n    },\n    exited: {\n      opacity: '0',\n      display: 'none'\n    }\n  };\n  return (\n    /*#__PURE__*/\n    //         <Transition in={transitionState} timeout={300} >\n    // \t{state => (\n    // \t\t<img src={Dave} alt=\"dolad\" style={{\n    // \t\t\ttransition: 'all .1s',\n    // \t\t\topacity: 0,\n    // \t\t\tdisplay: 'none',\n    //             width:  '225px',\n    //             height:  '225px',\n    //             borderRadius:'50%',\n    // \t\t\t...transitions[state]\n    // \t\t\t}} className=\"mt-2\" />\n    // \t)}\n    // </Transition>\n    _jsxDEV(CSSTransition, {\n      in: showDave,\n      timeout: 500,\n      classNames: {\n        enterActive: 'animate__bounceIn',\n        exitActive: 'animate__bounceOut'\n      },\n      onEnter: showImage //   onEntered={removeOpacity}\n      //   onExited={hideImage}\n      //   className={`animate__animated my-4 ${imageClasses}`}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(DaveTransition, \"IzQAx4VdkktvIbjrKPrLrg06AdI=\");\n\n_c = DaveTransition;\nexport default DaveTransition;\n\nvar _c;\n\n$RefreshReg$(_c, \"DaveTransition\");","map":{"version":3,"sources":["/home/dolan/Downloads/DaveDotCom_/src/animations/DaveTransition.js"],"names":["React","useState","useEffect","Dave","CSSTransition","Transition","DaveTransition","showCat","setShowCat","imageClasses","setImageClasses","counter","setCounter","isDanger","setIsDanger","isDanger2","setIsDanger2","toggleCat","hideImage","showImage","node","style","opacity","removeOpacity","addLanguage","newLanguages","languages","splice","newItem","Object","assign","randomItems","defaultLanguages","id","push","setLanguages","removeLanguage","ind","findIndex","language","transitions","entering","display","entered","exiting","exited","showDave","enterActive","exitActive"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Dave from '../screens/data/Dave.jpg';\nimport { CSSTransition, Transition } from 'react-transition-group';\n\n\n\nconst DaveTransition = () =>{\n\n\n    // const [transitionState, setTransitionState] = useState(true);\n    // const [showDave, setShowDave] = useState(true);\n    // const [imageClasses, setImageClasses] = useState(\"d-none\");\n\n\n\n\n    // function showImage(node) {\n    //     setImageClasses(\"d-block\");\n    //     node.style.opacity = 0;\n    //   }\n\n\n    const [showCat, setShowCat] = useState(false);\n  const [imageClasses, setImageClasses] = useState(\"d-none\");\n  /** End Variables for Using CSS Transitions  */\n  /** Start Variables for Using Transition Groups  */\n  // const [languages, setLanguages] = useState(randomItems(defaultLanguages, 4));\n  const [counter, setCounter] = useState(11);\n  /** End Variables for Using Transition Groups  */\n  /** Start Variables for Using Switch Transitions  */\n  const [isDanger, setIsDanger] = useState(true);\n  const [isDanger2, setIsDanger2] = useState(true);\n  /** End Variables for Using Switch Transitions  */\n\n  /** Start Helper Functions for Using CSS Transitions */\n  function toggleCat () {\n    setShowCat(!showCat);\n  }\n\n  function hideImage() {\n    setImageClasses(\"d-none\");\n  }\n\n  function showImage(node) {\n    setImageClasses(\"d-block\");\n    node.style.opacity = 0;\n  }\n\n  function removeOpacity (node) {\n    node.style.opacity = 1;\n  }\n  /** End Helper Functions for Using CSS Transitions */\n\n  /** Start Helper Functions for Using Transition Groups */\n  function addLanguage() {\n    const newLanguages = languages.splice(0);\n    const newItem = Object.assign({}, randomItems(defaultLanguages, 1)[0]);\n    newItem.id = counter;\n    newLanguages.push(newItem);\n    setLanguages(newLanguages);\n    setCounter(counter + 1);\n  }\n\n  function removeLanguage (id) {\n    const newLanguages = languages.splice(0);\n    const ind = newLanguages.findIndex((language) => language.id === id);\n    if (ind !== -1) {\n      newLanguages.splice(ind, 1);\n      setLanguages(newLanguages);\n    }\n  }\n      \n    const transitions = {\n        entering: {\n          display: 'block'\n        },\n        entered: {\n          opacity: 1,\n          display: 'block'\n        },\n        exiting: {\n          opacity: 0,\n          display: 'block'\n        },\n        exited: {\n          opacity: '0',\n          display: 'none'\n        }\n      };\n    return(\n//         <Transition in={transitionState} timeout={300} >\n// \t{state => (\n// \t\t<img src={Dave} alt=\"dolad\" style={{\n// \t\t\ttransition: 'all .1s',\n// \t\t\topacity: 0,\n// \t\t\tdisplay: 'none',\n//             width:  '225px',\n//             height:  '225px',\n//             borderRadius:'50%',\n// \t\t\t...transitions[state]\n// \t\t\t}} className=\"mt-2\" />\n// \t)}\n// </Transition>\n        <CSSTransition\n        in={showDave} timeout={500} classNames={{\n            enterActive: 'animate__bounceIn',\n            exitActive: 'animate__bounceOut'\n          }} \n          onEnter={showImage}\n        //   onEntered={removeOpacity}\n        //   onExited={hideImage}\n        //   className={`animate__animated my-4 ${imageClasses}`}\n        \n        >\n            \n        </CSSTransition>\n    )\n}\n\nexport default DaveTransition;"]},"metadata":{},"sourceType":"module"}