{"ast":null,"code":"var _jsxFileName = \"/home/dolan/Downloads/DaveDotCom_/src/screens/ProjectsScreen.js\";\nimport classes from './css/ProjectsScreen.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProjectsScreen = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"custom-subTitle\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Welcome to Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Here is a list of some things that I've worked on!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"My Github: https://github.com/DavidHostler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Machine Learning Related Projects\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"Here are some examples of ML projects that I've created in 2020, 2021:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"\\\"Milk\\\" (it's a weird name I know, but some people like a nice glass of Milk now and then). This is a super resolution generative adversarial network that  receives an image of a given size, and uses deep learning to \\\"hallucinate\\\" a more high resolution version of that image.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"https://github.com/DavidHostler/Milk\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"https://github.com/DavidHostler/Pytorch-Gaussian-NN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"This is a little research project I worked on briefly in late 2020 and early 2021. I had volunteered to help some grad students in the University of Toronto Scarborough materials science research project with implementing a single hidden-layer neural network in order to model high-precision Gaussian functions given a single input value. The idea is that if a given element or compound has a known excitation energy known to a certain accuracy, then we could improve this accuracy by using a neural network to approximate the Gaussian distribution function centred around this excitation energy eigenvalue. The results were that the required neural architecture was insufficient for such a desired result, since training the neural network on successive eigenvalue training data had the effect of causing the model to \\\"unlearn\\\" anything it knew of previous eigenvalue distributions. Therefore, I posit that the only way to implement this method successfully would be to ascribe to the model an attention window- e.g. RNN's, LSTM's or preferably Transformers. These models were deemed too complicated for the desired architecture and so they decided to implement the energy distribution functions directly by hard-coding the distribution function.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"DRACO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 18\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"https://github.com/DavidHostler/Draco\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 18\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"This one is a favorite for a couple of reasons. I was attempting to implement a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients or DDPG for short. I wanted to maximize the speed of my agent as well. Python is known to run about ~ 20 times more slowly than C/C++, so I figured that I'd implement my solution in C++ using my current understanding of the Python code at the time. In doing so,  I ran into a few build issues with the Tensorflow C API and figured that since DDPG only uses deep hidden layers (i.e. linear transformations of the form Ax + b = y, where A is a matrix a.k.a. \\\"weights\\\"\\\", x is the input tensor, b is the bias) This project allowed me to play around with a super fast RL simulation and learn more about the direct behaviour of deep learning models from a mathematical point of view, as I had to hard-code the linear transformations and take the derivatives of activation functions numerically. If using this model, depending on the user's architecture you might want to consider implementing a \\\"Big Float\\\" datatype to prevent \\\"Nan\\\" values as weights, biases or gradients.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Web Develpment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: \"https://github.com/DavidHostler/Invinzsible\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"During 2021, I briefly worked as a Fullstack developer for a business called Invinzsible Inc. With a small team, I implemented many (but not all) of the website's features using my favorite stack, ReactJS and the Django Rest Framework. Using ReactJS, I built a basic layout of page navigation to get from the homse page to the checkout and inventory screens. Additionally, I implemented a backend using Django with Python and created three endpoints: Products, Orders, and Cart. I deployed this basic REST API to Heroku, and used Postman to make sure that various HTTP requests worked (GET, POST, PUT, and DELETE). Once the basic CRUD app was working online, I made use of Axios, a very useful web client for NodeJS, and basic React hooks (useState, useEffect) to interact with JSON data from the API. This would allow a potential user to view a product, add it to their cart, and make a purchase of all items in said cart once their shopping trip is satisfactory.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h5\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"I have developed a ton of other projects related to web and mobile fullstack development, some yet to be made public on Github. Coming soon, I may post the React-Native chat app code that I've been working on for mobile (I was hoping to maybe get a few customers should I complete it!)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Additionally, I have a few stock projects that I may have had little time to complete but that I thought were potential money-makers, including a dating app, a cryptocurrency payment service, and maybe a data based fitness app.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"The latter I suspect will be difficult to monetize as a consequence of human hubris- attempting to make accurate recommendations for fitness routines, users would have to give honest measurements of their strength and size. The problem with this is that most young men will say that they can bench 225 and think that they are 15% bodyfat!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n\n_c = ProjectsScreen;\nexport default ProjectsScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProjectsScreen\");","map":{"version":3,"sources":["/home/dolan/Downloads/DaveDotCom_/src/screens/ProjectsScreen.js"],"names":["classes","ProjectsScreen"],"mappings":";AAAA,OAAOA,OAAP,MAAoB,iCAApB;;;AAEA,MAAMC,cAAc,GAAG,MAAM;AACzB,sBACI;AAAA,2BACJ;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC;AAAd;AAAA;AAAA;AAAA;AAAA,cADJ,eAEA;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFA,eAKI;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cALJ,eAOI;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAPJ,eASI;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cATJ,eAUI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfJ,eAqBQ;AAAA,+BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cArBR,eA2BQ;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cA3BR,eAgCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAhCJ,eAsDQ;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAtDR,eAuDO;AAAA,qCAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cAvDP,eAwDI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAxDJ,eA8EI;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cA9EJ,eAgFI;AAAA,+BAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAhFJ,eAmFI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAnFJ,eAuGK;AAAA,+BAAK;AAAA,kCACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADC,eAMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANC,eAWD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,cAvGL;AAAA;AAAA;AAAA;AAAA;AAAA;AADI;AAAA;AAAA;AAAA;AAAA,UADJ;AAuIH,CAxID;;KAAMA,c;AA0IN,eAAeA,cAAf","sourcesContent":["import classes from './css/ProjectsScreen.module.css';\n\nconst ProjectsScreen = () => {\n    return(\n        <div >\n    <div>\n        <h1 className=\"custom-subTitle\"></h1>\n    <div>\n        <h1>Welcome to Projects</h1>\n    </div>\n        <div><h2>Here is a list of some things that I've worked on!</h2></div>\n        \n        <div><h5>My Github: https://github.com/DavidHostler</h5></div>\n\n        <div><h2>Machine Learning Related Projects</h2></div>\n        <h5>Here are some examples of ML projects that I've created \n            in 2020, 2021:\n        \n        </h5>\n   \n        <h5>\n            \"Milk\" (it's a weird name I know, but some people like a nice glass of Milk now and then).\n            This is a super resolution generative adversarial network that  receives an image of a given\n            size, and uses deep learning to \"hallucinate\" a more high resolution version of that image.            \n            \n        </h5>\n            <div>\n                <h5>\n                https://github.com/DavidHostler/Milk\n                </h5>\n            </div>\n\n            <div><h5>\n                \n            https://github.com/DavidHostler/Pytorch-Gaussian-NN\n\n                </h5></div>\n        <h5>\n\n            This is a little research project I worked on briefly in late 2020 and early 2021.\n            I had volunteered to help some grad students in the University of Toronto Scarborough \n            materials science research project with implementing a single hidden-layer neural network\n            in order to model high-precision Gaussian functions given a single input value.\n\n            The idea is that if a given element or compound has a known excitation energy known to a \n            certain accuracy, then we could improve this accuracy by using a neural network to approximate\n            the Gaussian distribution function centred around this excitation energy eigenvalue.\n\n            The results were that the required neural architecture was insufficient for such a desired result,\n            since training the neural network on successive eigenvalue training data had the effect of causing the \n            model to \"unlearn\" anything it knew of previous eigenvalue distributions.\n            Therefore, I posit that the only way to implement this method successfully would be to ascribe to the\n            model an attention window- e.g. RNN's, LSTM's or preferably Transformers.\n\n            These models were deemed too complicated for the desired architecture and so they decided to implement\n            the energy distribution functions directly by hard-coding the distribution function.\n\n        </h5>\n\n            <div><h3>DRACO</h3></div>\n           <div> <h5>https://github.com/DavidHostler/Draco</h5> </div>\n        <h5>\n            This one is a favorite for a couple of reasons. I was attempting to implement \n            a Reinforcement Learning agent using a technique called Deep Deterministic Policy Gradients\n            or DDPG for short. I wanted to maximize the speed of my agent as well.\n            \n            Python is known to run about ~ 20 times more slowly than C/C++, \n            so I figured that I'd implement my solution in C++ using my current understanding \n            of the Python code at the time.\n\n            In doing so,  I ran into a few build issues with the Tensorflow C API and figured that\n            since DDPG only uses deep hidden layers (i.e. linear transformations of the form \n            Ax + b = y, where A is a matrix a.k.a. \"weights\"\", x is the input tensor, b is the bias)\n            \n            This project allowed me to play around with a super fast RL simulation and learn more \n            about the direct behaviour of deep learning models from a mathematical point of view, \n            as I had to hard-code the linear transformations and take the derivatives of activation \n            functions numerically.\n\n            If using this model, depending on the user's architecture you might want to consider implementing\n            a \"Big Float\" datatype to prevent \"Nan\" values as weights, biases or gradients.\n        </h5>\n\n        <div><h2>Web Develpment</h2></div>\n\n        <div><h5>https://github.com/DavidHostler/Invinzsible</h5></div>\n\n        \n        <h5>\n\n        During 2021, I briefly worked as a Fullstack developer for a business \n        called Invinzsible Inc. With a small team, I implemented many (but not all)\n        of the website's features using my favorite stack, ReactJS and the Django\n        Rest Framework.\n\n        Using ReactJS, I built a basic layout of page navigation to get from the homse\n        page to the checkout and inventory screens. Additionally, I implemented a backend\n        using Django with Python and created three endpoints: Products, Orders, and Cart.\n        I deployed this basic REST API to Heroku, and used Postman to make sure that various \n        HTTP requests worked (GET, POST, PUT, and DELETE).\n        \n        Once the basic CRUD app was working online, I made use of Axios, a very useful web client\n        for NodeJS, and basic React hooks (useState, useEffect) to interact with JSON data from\n        the API. This would allow a potential user to view a product, add it to their cart, and \n        make a purchase of all items in said cart once their shopping trip is satisfactory.\n\n        </h5>\n         \n         <div><h5>\n             <div>I have developed a ton of other projects related to web and mobile\n                fullstack development, some yet to be made public on Github.\n                Coming soon, I may post the React-Native chat app code that I've been working on\n                for mobile (I was hoping to maybe get a few customers should I complete it!)\n                </div>\n             <div>\n                Additionally, I have a few stock projects that I may have had little time to \n                complete but that I thought were potential money-makers, including a dating app, \n                a cryptocurrency payment service, and maybe a data based fitness app.\n             </div>\n             <div>\n                The latter I suspect will be difficult to monetize as a consequence of human hubris-\n                attempting to make accurate recommendations for fitness routines, users would have to give\n                honest measurements of their strength and size. The problem with this is that most \n                young men will say that they can bench 225 and think that they are 15% bodyfat!\n             </div>\n\n\n                \n            \n                \n\n                \n\n             </h5></div>\n    </div>\n    </div>\n\n    )\n}\n\nexport default ProjectsScreen;"]},"metadata":{},"sourceType":"module"}